function Start-ScanWithC { 
    param ($Path)
    $Check = Test-Path -Path $Path
    if ($Check -eq $true) {
        Write-Host "[+] Starting Scan ... " -ForegroundColor Green
        powershell.exe .\$Path
    }
    else {
        Write-Host "[-] Scan File does not exist " -ForegroundColor Red
        exit
    }
}

function Get-Hashes { 
    param ($Path)

    $Check = Test-Path -Path $Path
    if ($Check -eq $false) {
        Write-Host "[-] Path file was not found " -ForegroundColor Red
        exit
    }

    Write-Host "[+] Path file was found " -ForegroundColor Green
    $AllPaths = Get-Content -Path $Path
    $WrongPaths = New-Object System.Collections.Generic.List[Object]
    $FilesHashes = New-Object System.Collections.Generic.List[Object]
   # $AllFiles = $AllPaths.Count
   # $Total = 0
   # Write-Progress -Activity "Processing Files..." -Status "Starting..." -PercentComplete 0
   # $StartTime = Get-Date
   # $TotalTime = 0


    foreach ($File in $AllPaths) {
       # $Total ++

       # $ElapsedTime = (Get-Date) - $StartTime
       # $AverageTimePerFile = $ElapsedTime.TotalSeconds / $Total
       # $EstimatedRemainingTime = ($AllFiles - $Total) * $AverageTimePerFile
       # $EstimatedRemainingTimeFormatted = [TimeSpan]::FromSeconds($EstimatedRemainingTime).ToString("hh\:mm\:ss")

       # $PercentComplete = ($Total / $AllFiles) * 100
       # Write-Progress -Activity "Processing Files..." -Status "Processing file $Total of $AllFiles. Estimated Time Remaining: $EstimatedRemainingTimeFormatted" -PercentComplete $PercentComplete
        if ($File -match "^Error" -or -not (Test-Path -Path $File)) {
            $WrongPaths.Add([PSCustomObject]@{
                    Path = $File
                })
            continue
        }
        try {
            $ItemCheck = Get-Item -Path $File -ErrorAction SilentlyContinue
            if (-not $ItemCheck.PSIsContainer) {
                try {
                    $HashSHA256 = Get-FileHash -Path $File -Algorithm SHA256
                    $HashSHA1 = Get-FileHash -Path $File -Algorithm SHA1
                    $HashMD5 = Get-FileHash -Path $File -Algorithm MD5
                    $FilesHashes.Add([PSCustomObject]@{
                            Path   = $File
                            SHA256 = $HashSHA256.Hash
                            SHA1   = $HashSHA1.Hash
                            MD5    = $HashMD5.Hash
                        })
                }
                catch {
                    Write-Host "[-] Access Denied or Unable to Read File: $File" -ForegroundColor Yellow
                    $WrongPaths.Add([PSCustomObject]@{
                            Path = $File
                        })
                    continue
                }
            }
            else {
                $WrongPaths.Add([PSCustomObject]@{
                        Path = $File
                    })
                continue
            } 
        }
        catch {
            $WrongPaths.Add([PSCustomObject]@{
                    Path = $File
                })
            Write-Host "[-] Unknown Error: $_ "
        }
    }
    return [PSCustomObject]@{
        Hashes   = $FilesHashes
        BadPaths = $WrongPaths
    }
}

function Compare-HashesWithDatabase {
    [CmdletBinding()]
    param (
        [Parameter()]
        [TypeName]
        $ParameterName
    )
    
}